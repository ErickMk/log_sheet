"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
import re
from dotenv import load_dotenv

# Load environment variables from .env file (for local development)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*la-va@b(5t7)kmo+om$&0d0prlhh@qaztwr+3!26dgsa@quuv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".vercel.app", "your-backend-domain.com"]


# ===============================================
# DATABASE CONFIGURATION
# ===============================================

print("=" * 60)
print("DATABASE CONFIGURATION")
print("=" * 60)

# Try to use POSTGRES_URL_NON_POOLING first (best for Django on serverless)
DATABASE_URL = os.getenv('POSTGRES_URL_NON_POOLING') or os.getenv('POSTGRES_URL')

if DATABASE_URL:
    print(f"[INFO] Found DATABASE_URL")
    
    # Parse the connection URL
    # Format: postgres://user:password@host:port/database?params
    match = re.match(r'postgres(?:ql)?://([^:]+):([^@]+)@([^:]+):(\d+)/([^?]+)', DATABASE_URL)
    
    if match:
        POSTGRES_USER = match.group(1)
        POSTGRES_PASSWORD = match.group(2)
        POSTGRES_HOST = match.group(3)
        POSTGRES_PORT = match.group(4)
        POSTGRES_DATABASE = match.group(5)
        
        print(f"POSTGRES_USER: {POSTGRES_USER}")
        print(f"POSTGRES_HOST: {POSTGRES_HOST}")
        print(f"POSTGRES_PORT: {POSTGRES_PORT}")
        print(f"POSTGRES_DATABASE: {POSTGRES_DATABASE}")
        print(f"POSTGRES_PASSWORD present: {bool(POSTGRES_PASSWORD)}")
        
        # CRITICAL FIX for AWS Lambda IPv6 issue:
        # Replace the pooler hostname with direct connection hostname
        # This ensures IPv4 connectivity
        if 'pooler.supabase.com' in POSTGRES_HOST:
            # Extract project reference
            project_ref = POSTGRES_USER.split('.')[1] if '.' in POSTGRES_USER else None
            
            if project_ref:
                # Use direct connection host instead of pooler
                POSTGRES_HOST = f'db.{project_ref}.supabase.co'
                POSTGRES_PORT = '5432'  # Direct connection uses standard port
                print(f"[FIX] Detected pooler URL - switching to direct connection")
                print(f"[FIX] New host: {POSTGRES_HOST}")
                print(f"[FIX] New port: {POSTGRES_PORT}")
            
            # Also update username format if needed (remove project ref from username)
            if '.' in POSTGRES_USER:
                POSTGRES_USER = POSTGRES_USER.split('.')[0]
                print(f"[FIX] Updated username to: {POSTGRES_USER}")
        
        print("=" * 60)
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': POSTGRES_DATABASE,
                'USER': POSTGRES_USER,
                'PASSWORD': POSTGRES_PASSWORD,
                'HOST': POSTGRES_HOST,
                'PORT': POSTGRES_PORT,
                'CONN_MAX_AGE': 0,
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 10,
                }
            }
        }
        
        print(f"[SUCCESS] Database configured: postgresql://{POSTGRES_USER}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DATABASE}")
    else:
        print(f"[ERROR] Could not parse DATABASE_URL")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Fallback to individual environment variables
    print("[INFO] No DATABASE_URL found, trying individual variables")
    
    POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD')
    
    if POSTGRES_PASSWORD:
        # Hardcoded values for direct connection (not pooler)
        POSTGRES_USER = 'postgres'
        POSTGRES_HOST = 'db.mxwhovimordatihksosb.supabase.co'
        POSTGRES_PORT = '5432'
        POSTGRES_DATABASE = 'postgres'
        
        print(f"POSTGRES_USER: {POSTGRES_USER}")
        print(f"POSTGRES_HOST: {POSTGRES_HOST}")
        print(f"POSTGRES_PORT: {POSTGRES_PORT}")
        print(f"POSTGRES_DATABASE: {POSTGRES_DATABASE}")
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': POSTGRES_DATABASE,
                'USER': POSTGRES_USER,
                'PASSWORD': POSTGRES_PASSWORD,
                'HOST': POSTGRES_HOST,
                'PORT': POSTGRES_PORT,
                'CONN_MAX_AGE': 0,
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 10,
                }
            }
        }
        
        print(f"[SUCCESS] Database configured with hardcoded direct connection")
    else:
        print("[WARNING] No database credentials found - using SQLite")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

print("=" * 60)
print()

# ===============================================
# END DATABASE CONFIGURATION
# ===============================================


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "driver_log",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True  # For development - restrict in production