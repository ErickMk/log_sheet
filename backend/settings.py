"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
import dj_database_url # Keep this import
import re # Keep re for safety if you use it elsewhere, though we won't for DB here
from dotenv import load_dotenv

# Load environment variables from a .env file at project root (if present)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*la-va@b(5t7)kmo+om$&0d0prlhh@qaztwr+3!26dgsa@quuv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".vercel.app", "your-backend-domain.com"]


# ===============================================
# DATABASE CONFIGURATION (Neon/Vercel)
# ===============================================

print("=" * 60)
print("DATABASE CONFIGURATION")
print("=" * 60)

# 1. Attempt to get the database URL. We prioritize 'DATABASE_URL' 
DATABASE_URL = os.getenv('DATABASE_URL') 

# Fallback for old variable names (just in case they are still used)
if not DATABASE_URL:
    DATABASE_URL = os.getenv('POSTGRES_PRISMA_URL')


if not (DATABASE_URL and DATABASE_URL.strip()):
    # CRITICAL: Raise an error if the URL is missing, preventing fallbacks to SQLite.
    raise EnvironmentError(
        "FATAL: The 'DATABASE_URL' environment variable is not set. "
        "SQLite is not supported on Vercel. Please set the Neon connection string in Vercel Project Settings."
    )
else:
    try:
        # 2. Robust URL Cleaning
        # We must strip the query parameters (like sslmode) before passing the URL 
        # to dj_database_url.parse() to prevent common parsing errors.
        if '?' in DATABASE_URL:
            # Split the string at the first '?' and take only the first part (the base URL)
            CLEAN_DATABASE_URL = DATABASE_URL.split('?')[0]
        else:
            CLEAN_DATABASE_URL = DATABASE_URL
        
        # 3. Configure the default database connection.
        
        # Parse the cleaned URL into a dictionary
        DATABASES_CONFIG = dj_database_url.parse(
            CLEAN_DATABASE_URL,
            conn_max_age=600,
            ssl_require=True # CRITICAL for Vercel/Neon connection
        )
        
        # Ensure the engine is explicitly set to PostgreSQL.
        DATABASES_CONFIG['ENGINE'] = 'django.db.backends.postgresql'

        DATABASES = {
            'default': DATABASES_CONFIG
        }
        
        print(f"[SUCCESS] Database engine configured: {DATABASES['default']['ENGINE']}")

    except Exception as e:
        print(f"[FATAL ERROR] Failed to parse database URL. Ensure 'dj-database-url' is installed. Error: {e}")
        # Re-raise the error to stop the server from starting with a bad configuration
        raise e


# ===============================================
# END DATABASE CONFIGURATION
# ===============================================


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "driver_log",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# CORS/CSRF Configuration
# Allow all origins during development - CHANGE THIS FOR PRODUCTION
CORS_ALLOW_ALL_ORIGINS = True

# For production, use specific origins instead:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",
#     "http://127.0.0.1:5173",
#     "https://automatedlogsheet-11cdx651c-erickmungai27-gmailcoms-projects.vercel.app",
#     "https://your-custom-domain.com",  # Add your custom domain if you have one
# ]

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow common headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Allow common methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://automatedlogsheet-11cdx651c-erickmungai27-gmailcoms-projects.vercel.app",
    "https://your-custom-domain.com",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
