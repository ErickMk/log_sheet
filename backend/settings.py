"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
import sys
from dotenv import load_dotenv

# Load environment variables from .env file (for local development)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*la-va@b(5t7)kmo+om$&0d0prlhh@qaztwr+3!26dgsa@quuv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".vercel.app", "your-backend-domain.com"]


# ===============================================
# DATABASE CONFIGURATION (Direct PostgreSQL)
# ===============================================

print("=" * 60)
print("DATABASE CONFIGURATION DEBUG")
print("=" * 60)

# Get database credentials from environment
POSTGRES_USER = os.getenv('POSTGRES_USER')
POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD')
POSTGRES_HOST = os.getenv('POSTGRES_HOST')
POSTGRES_DATABASE = os.getenv('POSTGRES_DATABASE', 'postgres')

# Also check for alternative environment variable names
if not POSTGRES_USER:
    POSTGRES_USER = os.getenv('PGUSER')
if not POSTGRES_PASSWORD:
    POSTGRES_PASSWORD = os.getenv('PGPASSWORD')
if not POSTGRES_HOST:
    POSTGRES_HOST = os.getenv('PGHOST')
if not POSTGRES_DATABASE:
    POSTGRES_DATABASE = os.getenv('PGDATABASE', 'postgres')

# Detailed debug output
print(f"POSTGRES_USER: {POSTGRES_USER}")
print(f"POSTGRES_HOST: {POSTGRES_HOST}")
print(f"POSTGRES_DATABASE: {POSTGRES_DATABASE}")
print(f"POSTGRES_PASSWORD present: {bool(POSTGRES_PASSWORD)}")
if POSTGRES_PASSWORD:
    print(f"POSTGRES_PASSWORD length: {len(POSTGRES_PASSWORD)}")
    print(f"POSTGRES_PASSWORD first 3 chars: {POSTGRES_PASSWORD[:3]}...")

# Check all environment variables (useful for debugging)
print("\nAll environment variables containing 'POSTGRES' or 'PG':")
for key, value in os.environ.items():
    if 'POSTGRES' in key.upper() or key.upper().startswith('PG'):
        if 'PASSWORD' in key.upper():
            print(f"  {key}: [REDACTED - length {len(value)}]")
        else:
            print(f"  {key}: {value}")

print("=" * 60)

# Check if we have all required PostgreSQL credentials
if all([POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST]):
    print("[SUCCESS] All PostgreSQL credentials found - configuring PostgreSQL")
    
    # Check if psycopg2 is available
    try:
        import psycopg2
        print("[SUCCESS] psycopg2 module found")
    except ImportError as e:
        print(f"[ERROR] psycopg2 not found: {e}")
        print("[INFO] You may need to add 'psycopg2-binary' to requirements.txt")
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': POSTGRES_DATABASE,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': POSTGRES_HOST,
            'PORT': '5432',
            'CONN_MAX_AGE': 0,  # Disable persistent connections for serverless
            'OPTIONS': {
                'sslmode': 'require',
                'connect_timeout': 10,
            }
        }
    }
    
    print(f"[SUCCESS] Database configured: postgresql://{POSTGRES_USER}@{POSTGRES_HOST}:5432/{POSTGRES_DATABASE}")
    
else:
    # Fallback to SQLite for local development
    print("[WARNING] PostgreSQL credentials incomplete - falling back to SQLite")
    print(f"  POSTGRES_USER present: {bool(POSTGRES_USER)}")
    print(f"  POSTGRES_PASSWORD present: {bool(POSTGRES_PASSWORD)}")
    print(f"  POSTGRES_HOST present: {bool(POSTGRES_HOST)}")
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print(f"[INFO] Using SQLite at: {BASE_DIR / 'db.sqlite3'}")

print("=" * 60)
print()

# ===============================================
# END DATABASE CONFIGURATION
# ===============================================


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "driver_log",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True  # For development - restrict in production