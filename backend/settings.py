"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
import dj_database_url # Keep this import
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*la-va@b(5t7)kmo+om$&0d0prlhh@qaztwr+3!26dgsa@quuv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".vercel.app", "your-backend-domain.com"]


# ===============================================
# DATABASE CONFIGURATION (Supabase/Vercel)
# ===============================================

# 1. Attempt to get the database URL from the environment.
# We prioritize the environment variable Vercel is known to use for production DBs.
DATABASE_URL = os.getenv('DATABASE_URL') 
if not DATABASE_URL:
    DATABASE_URL = os.getenv('POSTGRES_URL_NON_POOLING')
    
# 2. Check if a database URL was found. If so, clean it up for Django.
if DATABASE_URL:
    # IMPORTANT: Remove query params (like pooling config) as they confuse Django/dj_database_url
    if '?' in DATABASE_URL:
        DATABASE_URL = DATABASE_URL.split('?')[0]
    
    # IMPORTANT: Replace pooling port (6543) with the direct port (5432) for Django
    DATABASE_URL = DATABASE_URL.replace(":6543", ":5432")
    
    # 3. Use the parsed, cleaned URL for the default database connection.
    # We must explicitly pass the SSL requirement for Supabase/Vercel.
    DATABASES = {
        'default': dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            ssl_require=True
        )
    }

# 4. Fallback for Local Development (if no DATABASE_URL is found)
else:
    print("Warning: DATABASE_URL not found. Falling back to local SQLite.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# ===============================================
# END DATABASE CONFIGURATION
# ===============================================


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "driver_log",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# ... (rest of the settings remain unchanged)

# ... (the rest of your settings file continues here) ...

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
